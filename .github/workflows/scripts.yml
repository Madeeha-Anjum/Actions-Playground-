name: Publish
on:
  push:
    branches:
      - 'other'
# The following environment variables are required for the workflow to run
env:
  REGISTRY: ghcr.io
  PAT: ${{ secrets.CR_PAT }}
  HOSTNAME: ${{ secrets.VULTR_IP }}
  USER: ${{ secrets.VULTR_USER }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  echo:
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.actor}} # => Madeeha-Anjum
      - run: echo ${{ github.repository }} # => Madeeha-Anjum/actions-playground

  build-and-push-image:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: set lower case owner name
        env:
          IMAGE_NAME: '${{ github.repository }}'
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build/tag/login/push the latest image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:latest .
          echo $PAT | docker login ghcr.io -u USERNAME --password-stdin
          docker push $REGISTRY/$IMAGE_NAME
        env:
          # using custom PAT
          CR_PAT: PAT

  pull-and-run-image-on-vultr:
    name: Pull and run image on Vultr
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
      - name: set lower case owner name
        env:
          IMAGE_NAME: '${{ github.repository }}'
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      - name: SSH Command with key
        run: |
          echo $USER@$HOSTNAME
          mkdir ~/.ssh
          echo "$SSH_KEY" >> ~/.ssh/github-action
          chmod 600 ~/.ssh/github-action

      - name: Add known_hosts
        run: |
          ssh-keyscan $HOSTNAME >> ~/.ssh/known_hosts

      - name: SSH Command Manual
        run: |
          ssh -i ~/.ssh/github-action $USER@$HOSTNAME << EOF

          # Check if Docker is installed on the server
          if [ -x "$(command -v docker)" ]; then
            echo "DOCKER IS INSTALLED"
            # stop any running containers 
            docker kill $(docker ps -q)
          else
            echo "INSTALLING DOCKER"
            echo install docker on ubuntu 20.04
            sudo snap install docker
          fi

          # Pull the image 
          docker pull $REGISTRY/$IMAGE_NAME:latest

          # run the image
          docker run -d -p 80:3000 $REGISTRY/$IMAGE_NAME

          # exit 
          exit
          EOF
