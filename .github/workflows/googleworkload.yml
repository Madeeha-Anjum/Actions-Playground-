# Useful links
# 1. INSTRUCTIONS CLI: https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
# 2. GITHUB OIDC: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
# 3. ACTIONS: https://github.com/google-github-actions/auth

# How to setup Google Cloud Compute Engine with Workload identity provider

# Step 1: Create a Google Cloud Platform account
# Step 2: Create a project
# Step 3: Create a service account
# Step 4: Grant this service account access to the project
#          - workload identity user *
#          - serviceAccountUser
# Note if you missed one and need to add it later got to IAM select the account and add the role
# Step 5: Create a key for this service account
# Step 6: Copy the service account email address:
# service-id@exalted-booster-377120.iam.gserviceaccount.com
# note:we don't need a key for this service account because we will use workload identity provider
# -------------------------------------------------------------------------------------------------------------------------------
# Step: 7: Create a workload identity pool
# Step: 8: Create a workload identity provider
#          - Provider type: OIDC
#          - Issuer URL:  https://token.actions.githubusercontent.com
# Step: 9: Copy the identity provider Url: https://iam.googleapis.com/projects/377961128619/locations/global/workloadIdentityPools/pool/providers/provider-id
# -------------------------------------------------------------------------------------------------------------------------------
# Step: 10: Configure provider attributes
#          - google.subject = assertion.sub # identity of the user or service that is executing the Github Actions
# Step 11: Select the workload identity provider you created in step 7 Grant Access to the service account
#        - Select the service account you created in step3
#        - Paste the OIDC provider URL you copied in step 8 in the Workload Identity Provider field
#        - format type: JSON

# -------------------------------------------------------------------------------------------------------------------------------
# Step 12: Create a workflow file (Below is an example workflow file)

name: Deploy to Google Cloud Compute Engine
on: push

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      # https://github.com/google-github-actions/auth
      - uses: google-github-actions/auth@v1
        # Configure Workload Identity Federation via a credentials file.
        id: auth
        with:
          create_credentials_file: "true"
          workload_identity_provider: projects/377961128619/locations/global/workloadIdentityPools/pool/providers/provider-id
          service_account: service-id@exalted-booster-377120.iam.gserviceaccount.com

      - name: HOW TO USE THE CREDENTIALS
        run: |
          echo "The credentials file is located at: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "The credentials file contains the following:"
          cat $GOOGLE_APPLICATION_CREDENTIALS

      # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      # Now you can run gcloud commands authenticated as the impersonated service account.
      - id: "gcloud"
        name: "gcloud"
        run: |-
          gcloud ssh --zone us-central1-c playground --command "echo 'Hello World!'"
