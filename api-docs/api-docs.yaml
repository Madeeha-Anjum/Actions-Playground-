openapi: 3.0.1
info:
  title: Frontdoor
  description: 'This server is for  Link shortner'
  contact:
    email:
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://localhost:3000
tags:
  - name: shortener
    description: Everything related to shortening link shortener

paths:
  /api/v1:
    get:
      tags:
        - shortener
      summary: Basic test to see if connection has been established
      operationId: testConnection
      responses:
        200:
          description: Basic test to see if connection has been established
          content:
            application/json:
              example: 'Welcome!'
  /api/v1/shorten:
    get:
      tags:
        - shortener
      summary: 'Shorten a url'
      operationId: shorten
      responses:
        200:
          description: Shortened a url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortenedUrlInfo'
        400:
          description: Either longUrl/slug was not in the request OR longUrl is not a valid url OR slug is already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                'Long url and/or slug not found in request':
                  value:
                    message: 'longUrl or slug not found in request body'
                    code: 400
                'Long url is not a valid url':
                  value:
                    message: "'{longUrl}' is not a valid url"
                    code: 400
                'slug is already in use':
                  value:
                    message: "'{slug}' is already in use"
                    code: 400
        500:
          description: Something went wrong, check api logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericServerError'
  /api/v1/entries:
    get:
      tags:
        - shortener
      summary: 'Get all the entries in the database'
      operationId: getEntries
      responses:
        200:
          description: 'All the entries in the database'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortenedUrlInfo'
        500:
          description: Something went wrong, check api logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericServerError'
  /{slug}:
    get:
      tags:
        - shortener
      summary: 'Redirect to the long url'
      operationId: Redirect
      parameters:
        - name: slug
          in: path
          description: slug (aka id) of the long url
          example: a1b2c3
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirected to the long url
          content:
            application/json:
              example: 'Redirect to long url'
        404:
          description: Cannot find the slug in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'a1b2c3 does not exist'
                  code:
                    type: number
                    enum: [404]

components:
  schemas:
    ShortenedUrlInfo:
      type: object
      properties:
        slug:
          type: string
          example: 'a1b2c3'
        shortUrl:
          type: string
          example: 'http://localhost:3000/a1b2c3'
        longUrl:
          type: string
          example: 'http://google.com'
    BadRequestError:
      type: object
      properties:
        message:
          type: string
        code:
          type: number
          enum: [400]
    NotFoundError:
      type: object
      properties:
        message:
          type: string
        code:
          type: number
          enum: [400]
    GenericServerError:
      type: object
      properties:
        message:
          type: string
          example: 'Something went wrong'
        code:
          type: number
          enum: [500]
